extends layout

block content
  .settings-container
    // Header Section
    header.settings-header
      .container
        .header-content
          .back-button
            a(href="/dashboard")
              i.fas.fa-arrow-left
              span Back to Dashboard
          h1.settings-title Account Settings

    // Main Settings Content
    main.settings-main
      .container
        .settings-grid
          // Theme Settings
          .settings-card
            .settings-card-header
              .icon-wrapper
                i.fas.fa-palette
              h2 Theme Settings
            .settings-card-content
              .setting-item
                .setting-label
                  h3 Dark Mode
                  p Toggle between light and dark theme
                .setting-control
                  label.switch
                    input#dark-mode-toggle(type="checkbox" checked)
                    span.slider
              
              .setting-item
                .setting-label
                  h3 Accent Color
                  p Choose your preferred accent color
                .setting-control
                  .color-picker
                    button.color-option.active(style="background: linear-gradient(135deg, #ff6b35, #ff8555)" data-color="#ff6b35")
                    button.color-option(style="background: linear-gradient(135deg, #4a90e2, #357abd)" data-color="#4a90e2")
                    button.color-option(style="background: linear-gradient(135deg, #50c878, #42b368)" data-color="#50c878")
                    button.color-option(style="background: linear-gradient(135deg, #9b59b6, #8e44ad)" data-color="#9b59b6")

          // Notification Settings
          .settings-card
            .settings-card-header
              .icon-wrapper
                i.fas.fa-bell
              h2 Notifications
            .settings-card-content
              .setting-item
                .setting-label
                  h3 Email Notifications
                  p Receive email updates about your account
                .setting-control
                  label.switch
                    input#email-notifications-toggle(type="checkbox" checked)
                    span.slider
              
              .setting-item
                .setting-label
                  h3 Transaction Alerts
                  p Get notified about your transactions
                .setting-control
                  label.switch
                    input#transaction-alerts-toggle(type="checkbox" checked)
                    span.slider

          // Language Settings
          .settings-card
            .settings-card-header
              .icon-wrapper
                i.fas.fa-globe
              h2 Language & Region
            .settings-card-content
              .setting-item
                .setting-label
                  h3 Interface Language
                  p Choose your preferred language
                .setting-control
                  select#language-select.form-select
                    option(value="en") English
                    option(value="es") Español
                    option(value="fr") Français
                    option(value="de") Deutsch
                    option(value="ja") 日本語
                    option(value="zh") 中文

block styles
  style.
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    :root {
      --primary-bg: #0a0a0a;
      --secondary-bg: #1a1a1a;
      --card-bg: #1e1e1e;
      --surface-bg: #252525;
      --text-primary: #ffffff;
      --text-secondary: #b0b0b0;
      --text-muted: #808080;
      --accent-orange: #ff6b35;
      --accent-orange-hover: #ff8555;
      --accent-orange-light: rgba(255, 107, 53, 0.1);
      --border-color: #333333;
      --border-hover: #444444;
      --glass-bg: rgba(255, 255, 255, 0.05);
      --shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
      --shadow-hover: 0 12px 40px rgba(0, 0, 0, 0.4);
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: var(--primary-bg);
      color: var(--text-primary);
      min-height: 100vh;
      line-height: 1.6;
    }

    .settings-container {
      min-height: 100vh;
      background: linear-gradient(135deg, var(--primary-bg) 0%, var(--secondary-bg) 100%);
    }

    .settings-header {
      background: var(--glass-bg);
      backdrop-filter: blur(20px);
      border-bottom: 1px solid var(--border-color);
      padding: 1.5rem 0;
      position: sticky;
      top: 0;
      z-index: 100;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 2rem;
    }

    .header-content {
      display: flex;
      align-items: center;
      gap: 2rem;
    }

    .back-button a {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      color: var(--text-secondary);
      text-decoration: none;
      font-size: 0.95rem;
      padding: 0.75rem 1.25rem;
      border-radius: 12px;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      border: 1px solid transparent;
    }

    .back-button a:hover {
      color: var(--accent-orange);
      background: var(--accent-orange-light);
      border-color: var(--accent-orange);
      transform: translateX(-2px);
    }

    .back-button i {
      font-size: 1.1rem;
    }

    .settings-title {
      font-size: 2rem;
      font-weight: 700;
      background: linear-gradient(135deg, var(--accent-orange), #ff8555);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .settings-main {
      padding: 3rem 0;
    }

    .settings-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
      gap: 2rem;
    }

    .settings-card {
      background: var(--card-bg);
      border-radius: 20px;
      border: 1px solid var(--border-color);
      overflow: hidden;
      box-shadow: var(--shadow);
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      position: relative;
    }

    .settings-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 2px;
      background: linear-gradient(90deg, var(--accent-orange), #ff8555);
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .settings-card:hover {
      transform: translateY(-4px);
      box-shadow: var(--shadow-hover);
      border-color: var(--border-hover);
    }

    .settings-card:hover::before {
      opacity: 1;
    }

    .settings-card-header {
      padding: 2rem 2rem 1rem;
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .settings-card-header .icon-wrapper {
      width: 48px;
      height: 48px;
      background: var(--accent-orange-light);
      border-radius: 14px;
      display: flex;
      align-items: center;
      justify-content: center;
      border: 1px solid rgba(255, 107, 53, 0.2);
    }

    .settings-card-header i {
      font-size: 1.4rem;
      color: var(--accent-orange);
    }

    .settings-card-header h2 {
      font-size: 1.4rem;
      font-weight: 600;
      color: var(--text-primary);
    }

    .settings-card-content {
      padding: 0 2rem 2rem;
    }

    .setting-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 1.5rem 0;
      border-bottom: 1px solid var(--border-color);
      transition: all 0.3s ease;
    }

    .setting-item:last-child {
      border-bottom: none;
      padding-bottom: 0;
    }

    .setting-item:first-child {
      padding-top: 0;
    }

    .setting-item:hover {
      padding-left: 0.5rem;
    }

    .setting-label h3 {
      font-size: 1.1rem;
      font-weight: 500;
      color: var(--text-primary);
      margin-bottom: 0.25rem;
    }

    .setting-label p {
      font-size: 0.9rem;
      color: var(--text-muted);
      margin: 0;
    }

    /* Modern Switch Styles */
    .switch {
      position: relative;
      width: 56px;
      height: 32px;
    }

    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: var(--surface-bg);
      border: 2px solid var(--border-color);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      border-radius: 32px;
    }

    .slider:before {
      position: absolute;
      content: "";
      height: 24px;
      width: 24px;
      left: 2px;
      bottom: 2px;
      background: linear-gradient(135deg, #ffffff, #f0f0f0);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      border-radius: 50%;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
    }

    input:checked + .slider {
      background: var(--accent-orange);
      border-color: var(--accent-orange);
      box-shadow: 0 0 20px rgba(255, 107, 53, 0.3);
    }

    input:checked + .slider:before {
      transform: translateX(24px);
      background: linear-gradient(135deg, #ffffff, #ffffff);
      box-shadow: 0 2px 12px rgba(0, 0, 0, 0.3);
    }

    /* Color Picker Styles */
    .color-picker {
      display: flex;
      gap: 1rem;
      align-items: center;
    }

    .color-option {
      width: 40px;
      height: 40px;
      border-radius: 12px;
      border: 2px solid transparent;
      cursor: pointer;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      position: relative;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .color-option:hover {
      transform: scale(1.1) translateY(-2px);
      box-shadow: 0 6px 20px rgba(0, 0, 0, 0.25);
    }

    .color-option.active {
      border-color: var(--text-primary);
      box-shadow: 0 0 0 3px rgba(255, 107, 53, 0.3);
    }

    .color-option.active::after {
      content: '✓';
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      color: white;
      font-weight: bold;
      text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
    }

    /* Select Styles */
    .form-select {
      padding: 0.875rem 1.25rem;
      border-radius: 12px;
      border: 2px solid var(--border-color);
      background: var(--surface-bg);
      color: var(--text-primary);
      font-size: 0.95rem;
      min-width: 180px;
      cursor: pointer;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      appearance: none;
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%23b0b0b0' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
      background-position: right 1rem center;
      background-repeat: no-repeat;
      background-size: 1rem;
      padding-right: 3rem;
    }

    .form-select:hover {
      border-color: var(--accent-orange);
      background: var(--card-bg);
    }

    .form-select:focus {
      outline: none;
      border-color: var(--accent-orange);
      box-shadow: 0 0 0 3px rgba(255, 107, 53, 0.1);
    }

    .form-select option {
      background: var(--surface-bg);
      color: var(--text-primary);
      padding: 0.5rem;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .container {
        padding: 0 1rem;
      }

      .settings-grid {
        grid-template-columns: 1fr;
        gap: 1.5rem;
      }

      .settings-card {
        margin: 0;
      }

      .header-content {
        gap: 1rem;
      }

      .settings-title {
        font-size: 1.75rem;
      }

      .settings-card-header,
      .settings-card-content {
        padding-left: 1.5rem;
        padding-right: 1.5rem;
      }

      .setting-item {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
      }

      .setting-control {
        align-self: flex-end;
      }
    }

    @media (max-width: 480px) {
      .color-picker {
        gap: 0.75rem;
      }

      .color-option {
        width: 36px;
        height: 36px;
      }
    }

    /* Smooth animations */
    * {
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    /* Focus styles for accessibility */
    button:focus,
    select:focus,
    input:focus {
      outline: 2px solid var(--accent-orange);
      outline-offset: 2px;
    }

block scripts
  script.
    // DOM Elements
    const darkModeToggle = document.getElementById('dark-mode-toggle');
    const colorOptions = document.querySelectorAll('.color-option');
    const emailNotificationsToggle = document.getElementById('email-notifications-toggle');
    const transactionAlertsToggle = document.getElementById('transaction-alerts-toggle');
    const languageSelect = document.getElementById('language-select');

    // Load saved settings
    document.addEventListener('DOMContentLoaded', () => {
      loadSettings();
      setupEventListeners();
    });

    // User settings stored in memory
    let userSettings = {
      darkMode: true,
      accentColor: '#ff6b35',
      emailNotifications: true,
      transactionAlerts: true,
      language: 'en'
    };

    function loadSettings() {
      // Load dark mode preference
      darkModeToggle.checked = userSettings.darkMode;
      updateTheme(userSettings.darkMode);

      // Load accent color
      document.documentElement.style.setProperty('--accent-orange', userSettings.accentColor);
      document.documentElement.style.setProperty('--accent-orange-hover', adjustColor(userSettings.accentColor, 20));
      document.documentElement.style.setProperty('--accent-orange-light', hexToRgba(userSettings.accentColor, 0.1));
      
      colorOptions.forEach(option => {
        option.classList.remove('active');
        if (option.dataset.color === userSettings.accentColor) {
          option.classList.add('active');
        }
      });

      // Load notification preferences
      emailNotificationsToggle.checked = userSettings.emailNotifications;
      transactionAlertsToggle.checked = userSettings.transactionAlerts;

      // Load language preference
      languageSelect.value = userSettings.language;
    }

    // Set up event listeners
    function setupEventListeners() {
      // Dark mode toggle
      darkModeToggle.addEventListener('change', (e) => {
        userSettings.darkMode = e.target.checked;
        updateTheme(userSettings.darkMode);
      });

      // Accent color selection
      colorOptions.forEach(option => {
        option.addEventListener('click', () => {
          const color = option.dataset.color;
          userSettings.accentColor = color;
          
          document.documentElement.style.setProperty('--accent-orange', color);
          document.documentElement.style.setProperty('--accent-orange-hover', adjustColor(color, 20));
          document.documentElement.style.setProperty('--accent-orange-light', hexToRgba(color, 0.1));
          
          // Update active state
          colorOptions.forEach(opt => opt.classList.remove('active'));
          option.classList.add('active');

          // Add a subtle animation effect
          option.style.transform = 'scale(1.2)';
          setTimeout(() => {
            option.style.transform = '';
          }, 200);
        });
      });

      // Notification toggles
      emailNotificationsToggle.addEventListener('change', (e) => {
        userSettings.emailNotifications = e.target.checked;
      });

      transactionAlertsToggle.addEventListener('change', (e) => {
        userSettings.transactionAlerts = e.target.checked;
      });

      // Language selection
      languageSelect.addEventListener('change', (e) => {
        userSettings.language = e.target.value;
        showNotification(`Language changed to ${e.target.options[e.target.selectedIndex].text}`);
      });
    }

    // Update theme based on dark mode preference
    function updateTheme(isDarkMode) {
      const root = document.documentElement;
      
      if (isDarkMode) {
        root.style.setProperty('--primary-bg', '#0a0a0a');
        root.style.setProperty('--secondary-bg', '#1a1a1a');
        root.style.setProperty('--card-bg', '#1e1e1e');
        root.style.setProperty('--surface-bg', '#252525');
        root.style.setProperty('--text-primary', '#ffffff');
        root.style.setProperty('--text-secondary', '#b0b0b0');
        root.style.setProperty('--text-muted', '#808080');
        root.style.setProperty('--border-color', '#333333');
        root.style.setProperty('--border-hover', '#444444');
      } else {
        root.style.setProperty('--primary-bg', '#f8f9fa');
        root.style.setProperty('--secondary-bg', '#ffffff');
        root.style.setProperty('--card-bg', '#ffffff');
        root.style.setProperty('--surface-bg', '#f1f3f4');
        root.style.setProperty('--text-primary', '#1a1a1a');
        root.style.setProperty('--text-secondary', '#4a4a4a');
        root.style.setProperty('--text-muted', '#6a6a6a');
        root.style.setProperty('--border-color', '#e1e5e9');
        root.style.setProperty('--border-hover', '#d1d5d9');
      }
    }

    // Utility functions
    function adjustColor(hex, amount) {
      const num = parseInt(hex.replace("#", ""), 16);
      const amt = Math.round(2.55 * amount);
      const R = (num >> 16) + amt;
      const G = (num >> 8 & 0x00FF) + amt;
      const B = (num & 0x0000FF) + amt;
      return "#" + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +
          (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +
          (B < 255 ? B < 1 ? 0 : B : 255)).toString(16).slice(1);
    }

    function hexToRgba(hex, alpha) {
      const r = parseInt(hex.slice(1, 3), 16);
      const g = parseInt(hex.slice(3, 5), 16);
      const b = parseInt(hex.slice(5, 7), 16);
      return `rgba(${r}, ${g}, ${b}, ${alpha})`;
    }

    function showNotification(message) {
      // Create a simple notification
      const notification = document.createElement('div');
      notification.textContent = message;
      notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: var(--accent-orange);
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        z-index: 1000;
        transform: translateX(100%);
        transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      `;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.style.transform = 'translateX(0)';
      }, 100);
      
      setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
          document.body.removeChild(notification);
        }, 300);
      }, 3000);
    }